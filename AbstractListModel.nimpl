module AbstractListModel;

import Enums;
import Variant;
import ModelIndex;

opaque Handle;

@nodispose
opaque Interior extends Handle {
    // for access to protected stuff from MethodDelegate
    void beginInsertRows(ModelIndex.Deferred parent, int first, int last);
    void endInsertRows();

    void beginRemoveRows(ModelIndex.Deferred parent, int first, int last);
    void endRemoveRows();

    void beginResetModel();
    void endResetModel();
}

flags MethodMask {
    // required, so not in mask:
    // RowCount
    // Data

    // optional:
    HeaderData = 1
}

interface MethodDelegate {
    int rowCount(ModelIndex.Handle parent);
    Variant.Deferred data(ModelIndex.Handle index, ItemDataRole role);
    
    // "optional" (we still have to implement, but only active if mask flag is set)
    Variant.Deferred headerData(int section, Orientation orientation, ItemDataRole role);
}

delegate MethodDelegate CreateFunc(Interior model); // so we can inject 'this' when constructing the delegate

Handle createSubclassed(CreateFunc createFunc, MethodMask mask);
