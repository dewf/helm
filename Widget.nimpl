module Widget;

import Common;
import Signal;
import Layout;
import Painter;

int WIDGET_SIZE_MAX;   // pass-through of QWIDGETSIZE_MAX

opaque Handle {
    void setParent(Handle parent);
    Handle getWindow();
    
    void setEnabled(bool state);
    void setMaximumWidth(int maxWidth);
    void setMaximumHeight(int maxHeight);
    Rect getRect();
    void resize(int width, int height);

    void show();
    void hide();
    void setVisible(bool state);

    void update();
    void update(int x, int y, int width, int height);
    void update(Rect rect);

    void setWindowTitle(string title);

    void setLayout(Layout.Handle layout);
    Layout.Handle getLayout();

    // things that probably only make sense for subclassed (but we haven't yet defined a separate opaque for that purpose)
    void setUpdatesEnabled(bool enabled);
    void setMouseTracking(bool enabled);

    // signals + event handling
    void onWindowTitleChanged(Signal.StringDelegate func);
}

Handle create();

// SUBCLASSING ===========================================================

flags MethodMask {
    None = 0,                // F# giving us grief!
    PaintEvent = 1 << 0,
    MousePressEvent = 1 << 1,
    MouseMoveEvent = 1 << 2
}

enum Modifier {
    None,
    Shift,
    Control,
    Alt,
    Meta
}

enum MouseButton {
    None,
    Left,
    Right,
    Middle,
    Other
}

// sadly client will have to implement all of these, BUT empty methods / returning default values will be OK
// because only those included in the "method mask" will actually be invoked
interface MethodDelegate {
    void paintEvent(Painter.Handle painter, Rect rect);
    void mousePressEvent(Point pos, MouseButton button, Set<Modifier> modifiers);
    void mouseMoveEvent(Point pos, Set<MouseButton> buttons, Set<Modifier> modifiers);
}

Handle createSubclassed(MethodDelegate methodDelegate, MethodMask methodMask);
