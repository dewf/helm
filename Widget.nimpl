module Widget;

import Common;
import Layout;
import Painter;
import Icon;

int WIDGET_SIZE_MAX;   // pass-through of QWIDGETSIZE_MAX

enum ContextMenuPolicy {
    NoContextMenu = 0,
    Prevent = 4,
    Default = 1,
    Actions = 2,
    Custom = 3
}

enum WindowModality {
    NonModal = 0,
    WindowModal = 1,
    ApplicationModal = 2
}

flags SignalMask {
    CustomContextMenuRequested = 1,
    WindowIconChanged = 1 << 1,
    WindowTitleChanged = 1 << 2
}

interface SignalHandler {
    void customContextMenuRequested(Point pos);
    void windowIconChanged(Icon.Handle icon);
    void windowTitleChanged(string title);
}

opaque Handle {
    void setParent(Handle parent);
    Handle getWindow();
    
    void setEnabled(bool state);
    void setMinimumWidth(int minWidth);
    void setMinimumHeight(int minHeight);
    void setMaximumWidth(int maxWidth);
    void setMaximumHeight(int maxHeight);

    Rect getRect();
    Size getSize();

    void updateGeometry();
    void adjustSize();

    void resize(int width, int height);

    void setFixedWidth(int width);
    void setFixedHeight(int height);
    void setFixedSize(int width, int height);

    void move(Point p);
    void move(int x, int y);
    void show();
    void hide();
    void setVisible(bool state);

    void update();
    void update(int x, int y, int width, int height);
    void update(Rect rect);

    void setWindowTitle(string title);
    void setWindowModality(WindowModality modality);

    void setLayout(Layout.Handle layout);
    Layout.Handle getLayout();

    void setContextMenuPolicy(ContextMenuPolicy policy);
    Point mapToGlobal(Point p);

    // things that probably only make sense for subclassed (but we haven't yet defined a separate opaque for that purpose)
    void setUpdatesEnabled(bool enabled);
    void setMouseTracking(bool enabled);
    void setAcceptDrops(bool enabled);
    // end subclass-y stuff

    void setSignalMask(SignalMask mask);
}

Handle create(SignalHandler handler);

// SUBCLASSING ===========================================================

enum Modifier {
    None,
    Shift,
    Control,
    Alt,
    Meta
}

enum MouseButton {
    None,
    Left,
    Right,
    Middle,
    Other
}

enum DropAction {
    Ignore = 0,
    Copy = 0x1,
    Move = 0x2,
    Link = 0x4,
    ActionMask = 0xff,
    TargetMoveAction = 0x8002 // windows only stuff
}

@nodispose
opaque Event {
    void accept();
    void ignore();
}

@nodispose // owned by Qt once used
opaque MimeData {
    Array<string> formats();
    bool hasFormat(string mimeType);
    
    string text();
    void setText(string text);

    Array<string> urls();
    void setUrls(Array<string> urls);
}
MimeData createMimeData();

@nodispose // owned by Qt once used
opaque Drag {
    void setMimeData(MimeData data);
    DropAction exec(Set<DropAction> supportedActions, DropAction defaultAction);
}
Drag createDrag(Handle parent);  // the parent will be responsible for cleanup (and neither do we own the MimeData assigned)

@nodispose // not owned, temporary wrapper for method delegate
opaque DragMoveEvent extends Event {
    DropAction proposedAction();
    void acceptProposedAction();
    Set<DropAction> possibleActions();

    // slight variation on the real methods:
    void acceptDropAction(DropAction action); // will internally call either .acceptProposedAction or .accept() after setting drop action
}

// sadly client will have to implement all of these, BUT empty methods / returning default values will be OK
// because only those included in the "method mask" will actually be invoked

flags MethodMask {
    PaintEvent = 1 << 0,
    MousePressEvent = 1 << 1,
    MouseMoveEvent = 1 << 2,
    MouseReleaseEvent = 1 << 3,
    EnterEvent = 1 << 4,
    LeaveEvent = 1 << 5,
    SizeHint = 1 << 6,
    ResizeEvent = 1 << 7,

    DropEvents = 1 << 8      // dragenter, dragmove, dragleave
}

interface MethodDelegate {
    Size sizeHint();
    void paintEvent(Painter.Handle painter, Rect updateRect);
    void mousePressEvent(Point pos, MouseButton button, Set<Modifier> modifiers);
    void mouseMoveEvent(Point pos, Set<MouseButton> buttons, Set<Modifier> modifiers);
    void mouseReleaseEvent(Point pos, MouseButton button, Set<Modifier> modifiers);
    void enterEvent(Point pos);
    void leaveEvent();
    void resizeEvent(Size oldSize, Size newSize);

    // dragMove does double duty, also an 'enter' event - check isEnterEvent flag
    void dragMoveEvent(Point pos, Set<Modifier> modifiers, MimeData mimeData, DragMoveEvent moveEvent, bool isEnterEvent);
    void dragLeaveEvent();
    void dropEvent(Point pos, Set<Modifier> modifiers, MimeData mimeData, DropAction action);
}

Handle createSubclassed(MethodDelegate methodDelegate, MethodMask methodMask, SignalHandler handler);
