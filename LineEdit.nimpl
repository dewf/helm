module LineEdit;

import Widget;
import Common;
import Icon;
import Enums;

enum EchoMode { Normal, NoEcho, Password, PasswordEchoOnEdit }

flags SignalMask {
    // Widget:
    CustomContextMenuRequested = 1,
    WindowIconChanged = 1 << 1,
    WindowTitleChanged = 1 << 2,

    // LineEdit:
    CursorPositionChanged = 1 << 3,
    EditingFinished = 1 << 4,
    InputRejected = 1 << 5,
    ReturnPressed = 1 << 6,
    SelectionChanged = 1 << 7,
    TextChanged = 1 << 8,
    TextEdited = 1 << 9
}

interface SignalHandler {
    // Widget:
    void customContextMenuRequested(Point pos);
    void windowIconChanged(Icon.Handle icon);
    void windowTitleChanged(string title);

    // LineEdit:
    void cursorPositionChanged(int oldPos, int newPos);
    void editingFinished();
    void inputRejected();
    void returnPressed();
    void selectionChanged();
    void textChanged(string text);
    void textEdited(string text);
}

opaque Handle extends Widget.Handle {
    bool hasAcceptableInput();          // read-only
    void setAlignment(Alignment align);
    void setClearButtonEnabled(bool enabled);
    void setCursorMoveStyle(CursorMoveStyle style);
    void setCursorPosition(int pos);
    string displayText();               // read-only
    void setDragEnabled(bool enabled);
    void setEchoMode(EchoMode mode);
    void setFrame(bool enabled);
    bool hasSelectedText();             // read-only
    void setInputMask(string mask);
    void setMaxLength(int length);

    // not sure about these two, might not need the setter?
    bool isModified();                  
    void setModified(bool modified);

    void setPlaceholderText(string text);
    void setReadOnly(bool value);
    bool isRedoAvailable();             // read-only
    string selectedText();              // read-only
    void setText(string text);
    bool isUndoAvailable();             // read-only
    
    void setSignalMask(SignalMask mask);
}

Handle create(SignalHandler handler);
