module ComboBox;

import Common;
import Enums;
import Widget;
import Variant;
import AbstractItemModel;
import Icon;

flags SignalMask {
    Activated = 1 << 0,
    CurrentIndexChanged = 1 << 1,
    CurrentTextChanged = 1 << 2,
    EditTextChanged = 1 << 3,
    Highlighted = 1 << 4,
    TextActivated = 1 << 5,
    TextHighlighted = 1 << 6
}

interface SignalHandler {
    void activated(int index);
    void currentIndexChanged(int index);
    void currentTextChanged(string text);
    void editTextChanged(string text);
    void highlighted(int index);
    void textActivated(string text);
    void textHighlighted(string text);
}

enum InsertPolicy {
    NoInsert,
    InsertAtTop,
    InsertAtCurrent,
    InsertAtBottom,
    InsertAfterCurrent,
    InsertBeforeCurrent,
    InsertAlphabetically
}

enum SizeAdjustPolicy {
    AdjustToContents,
    AdjustToContentsOnFirstShow,
    AdjustToMinimumContentsLengthWithIcon
}

opaque Handle extends Widget.Handle {
    void clear();

    void addItem(string text, Variant.Deferred userData);
    void addItem(Icon.Deferred icon, string text, Variant.Deferred userData);
    void addItems(Array<string> texts);
    void setModel(AbstractItemModel.Handle model);

    // properties =====================================
    int count();                                        // read-only
    Variant.OwnedHandle currentData();                  // read-only
    Variant.OwnedHandle currentData(ItemDataRole role); // read-only

    void setCurrentIndex(int index);
    void setCurrentText(string text);
    void setDuplicatesEnabled(bool enabled);
    void setEditable(bool editable);
    void setFrame(bool hasFrame);
    void setIconSize(Size size);
    void setInsertPolicy(InsertPolicy policy);
    void setMaxCount(int count);
    void setMaxVisibleItems(int count);
    void setMinimumContentsLength(int length);
    void setModelColumn(int column);
    void setPlaceholderText(string text);
    void setSizeAdjustPolicy(SizeAdjustPolicy policy);
    // end properties =================================

    void setSignalMask(SignalMask mask);
}

Handle create(SignalHandler handler);
